[
  {
    "objectID": "code_of_conduct.html",
    "href": "code_of_conduct.html",
    "title": "flashr decks",
    "section": "",
    "text": "We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, or sexual identity and orientation.\nWe pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community.\n\n\n\nExamples of behavior that contributes to a positive environment for our community include:\n\nDemonstrating empathy and kindness toward other people\nBeing respectful of differing opinions, viewpoints, and experiences\nGiving and gracefully accepting constructive feedback\nAccepting responsibility and apologizing to those affected by our mistakes, and learning from the experience\nFocusing on what is best not just for us as individuals, but for the overall community\n\nExamples of unacceptable behavior include:\n\nThe use of sexualized language or imagery, and sexual attention or advances of any kind\nTrolling, insulting or derogatory comments, and personal or political attacks\nPublic or private harassment\nPublishing others’ private information, such as a physical or email address, without their explicit permission\nOther conduct which could reasonably be considered inappropriate in a professional setting\n\n\n\n\nCommunity leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful.\nCommunity leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate.\n\n\n\nThis Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event.\n\n\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible for enforcement at [INSERT CONTACT METHOD]. All complaints will be reviewed and investigated promptly and fairly.\nAll community leaders are obligated to respect the privacy and security of the reporter of any incident.\n\n\n\nCommunity leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct:\n\n\nCommunity Impact: Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community.\nConsequence: A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested.\n\n\n\nCommunity Impact: A violation through a single incident or series of actions.\nConsequence: A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban.\n\n\n\nCommunity Impact: A serious violation of community standards, including sustained inappropriate behavior.\nConsequence: A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban.\n\n\n\nCommunity Impact: Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior, harassment of an individual, or aggression toward or disparagement of classes of individuals.\nConsequence: A permanent ban from any sort of public interaction within the community.\n\n\n\n\nThis Code of Conduct is adapted from the Contributor Covenant, version 2.1, available at https://www.contributor-covenant.org/version/2/1/code_of_conduct.html.\nCommunity Impact Guidelines were inspired by Mozilla’s code of conduct enforcement ladder.\nFor answers to common questions about this code of conduct, see the FAQ at https://www.contributor-covenant.org/faq. Translations are available at https://www.contributor-covenant.org/translations."
  },
  {
    "objectID": "functions.html",
    "href": "functions.html",
    "title": "flashr decks",
    "section": "",
    "text": "term\npackage\ndescription\n\n\n\n\n-\nbase\nsubtraction\n\n\n:\nbase\nsequence of integers\n\n\n::\nbase\nexport variable from package for use\n\n\n!\nbase\nlogical NOT\n\n\n!=\nbase\nnot equal to\n\n\n[]\nbase\nsubset elements of vector\n\n\n*\nbase\nmultiplication\n\n\n/\nbase\ndivision\n\n\n&\nbase\nlogical AND\n\n\n%*%\nbase\nmultiply matrix with its transpose\n\n\n%/%\nbase\nquotient\n\n\n%%\nbase\nremainder\n\n\n%<>%\nmagrittr\nassignment pipe\n\n\n%>%\nmagrittr\npipe operator\n\n\n%$%\nmagrittr\nexposition pipe\n\n\n%in%\nbase\nidentify if element is in vector\n\n\n%T>%\nmagrittr\ntee pipe\n\n\n^\nbase\nexponent\n\n\n+\nbase\naddition\n\n\n<\nbase\nless than\n\n\n<-\nbase\nassignment operator\n\n\n<<-\nbase\nassignment operator (in functions for global environment)\n\n\n<=\nbase\nless than or equal to\n\n\n=\nbase\nassignment operator\n\n\n==\nbase\nequal to\n\n\n>\nbase\ngreater than\n\n\n>=\nbase\ngreater than or equal to\n\n\n|\nbase\nlogical OR\n\n\n|>\nbase\npipe operator (base R)\n\n\nabs()\nbase\ncalculate absolute value\n\n\naccumulate()\npurrr\naccumulate intermediate result of vector reduction\n\n\nacross()\ndplyr\napply transformation across multiple columns\n\n\nadd_predictions()\nmodelr\nadd predictions to a data frame\n\n\nadd_residuals()\nmodelr\nadd residuals to a data frame\n\n\naes()\nggplot2\ncreate aesthetic mappings between data and plot\n\n\nafter_stat()\nggplot2\nevaluate aesthetic mapping after statistical transformation\n\n\nall()\nbase\nassess whether conditional is true for all elements of a vector\n\n\nannotate()\nggplot2\nannotate plot independent of data\n\n\nanti_join()\ndplyr\njoin two data sets dropping all observations in x that have a match in y\n\n\nany_of()\ntidyselect\ncheck if any any elements are found in vector\n\n\nany()\nbase\nassess whether conditional is true for any elements of a vector\n\n\napply()\nbase\napply a function to multiple elements of an object in base R\n\n\napropos()\nutils\nreturn vector of object names matching pattern\n\n\napropros()\nutils\nreturns a character vector giving the names of objects in the search list matching (as a regular expression)\n\n\narrange()\ndplyr\nchange order of rows based on values of columns\n\n\narrow()\ngrid\nplot arrows\n\n\nas_date()\nlubridate\nconvert object to date\n\n\nas_datetime()\nlubridate\nconvert object to date-time\n\n\nas_tibble()\ntibble\ncoerce object into tibble\n\n\nas.character()\nbase\ncoerce object to character\n\n\nas.data.frame()\nbase\ncoerce object into data frame\n\n\nas.Date.character()\nbase\nconvert from character to date\n\n\nas.Date.factor()\nbase\nconvert from factor to date\n\n\nas.Date()\nbase\nconvert to date\n\n\nas.double()\nbase\ncoerce to double\n\n\nas.factor()\nbase\ncoerce object to factor\n\n\nas.integer()\nbase\ncoerce to integer\n\n\nas.logical()\nbase\ncoerce to logical\n\n\nas.numeric()\nbase\ncoerce object to numeric\n\n\nassign()\nbase\nassign a value to a name\n\n\nattr()\nbase\nreturn or set individual attribute values\n\n\nattributes()\nbase\nreturn all attributes of vector, matrix,  data frame, etc.\n\n\naugment()\ngenerics\naugment data with information from an object\n\n\nbeamer_presentation()\nrmarkdown\ncreate beamer presentation from R markdown file\n\n\nbetween()\ndplyr\ndetermine if values in a numeric vector fall in specified range\n\n\nbind_rows()\ndplyr\nbind rows in dplyr\n\n\nboundary()\nstringr\nmatch boundaries within strings\n\n\nc()\nbase\ncreate vector of numbers, characters, etc.\n\n\ncase_when()\ndplyr\nconditionally set values across multiple conditions\n\n\nceiling_date()\nlubridate\nround data-time up to ceiling\n\n\nceiling()\nbase\nround up to nearest integer\n\n\ncharToRaw()\nbase\nconverts a length-one character string to raw bytes\n\n\nclass()\nbase\nreturn object class\n\n\nclean_cache()\nknitr\nclear out code chunk cache\n\n\nclean_names()\njanitor\nclean data frame column names to be unique and consistent of only characters, numbers and _\n\n\ncoalesce()\ndplyr\ncombine vectors by returning the first non-missing value at each position\n\n\ncoef()\nstats\nextract model coefficients from object\n\n\ncoll()\nstringr\ncompare strings respecting standard collation rules\n\n\ncollect()\ndplyr\nretrieve data from a database into a local tibble\n\n\ncolors()\ngrDevices\nreturns vector of color names in R\n\n\ncolumn_to_rowname()\ntibble\nconvert a column of data to row names\n\n\ncomplete()\ntidyr\ncomplete a data frame with missing combinations of data\n\n\nconsecutive_id()\ndplyr\ngenerate a unique identifier for consecutive combinations\n\n\ncontains()\ntidyselect\nmatch column names that contain string\n\n\ncoord_cartesian()\nggplot2\nuse Cartesian coordinates\n\n\ncoord_fixed()\nggplot2\nforce aspect ratio between data units on axes\n\n\ncoord_flip()\nggplot2\nswitch x and y axes\n\n\ncoord_map()\nggplot2\nproject a map of a portion of the earth onto a flat 2D plane\n\n\ncoord_polar()\nggplot2\nuse polar coordinates\n\n\ncoord_quickmap()\nggplot2\nset aspect ratio correctly for maps\n\n\ncor()\nstats\ncompute the correlation of two vectors\n\n\ncount()\ndplyr\ncount unique values of variables\n\n\ncount()\nplyr\ncount unique values of variables\n\n\ncume_dist()\ndplyr\ncumulative distribution function giving proportion of all values less than or equal to the current rank\n\n\ncummax()\nbase\ncalculate the cumulative maxima of a vector\n\n\ncummean()\ndplyr\ncalculate cumulative means for a vector\n\n\ncummin()\nbase\ncalculate the cumulative minima of a vector\n\n\ncumprod()\nbase\ncalculate the cumulative products of a vector\n\n\ncumsum()\nbase\ncalculate the cumulative sums of a vector\n\n\ncut_interval()\nggplot2\ncreate n groups with equal range\n\n\ncut_number()\nggplot2\ncut data into groups of equal numbers of observations\n\n\ncut_width()\nggplot2\ncut data into groups of a particular width\n\n\ncut()\nbase\ndivide range of vector into intervals\n\n\ndata_grid()\nmodelr\ngenerate a data grid\n\n\ndata.frame()\nbase\ncreate data frame\n\n\ndata()\nutils\nload specific data set\n\n\ndate_names_langs()\nreadr\nretrieve weekdays and months of a specific language\n\n\ndate_names()\nreadr\nspecify how weekdays and months are represented\n\n\ndays()\nlubridate\nspecify the number of days to be used in dates\n\n\ndbConnect()\nDBI\ncreate connection to database\n\n\ndbFetch()\nDBI\nfetch the next n elements from a database results set and return as data frame\n\n\ndbGetQuery()\nDBI\nreturn results of database query as data frame\n\n\ndbHasCompleted()\nDBI\nreturn if database operation has completed\n\n\ndbReadTable()\nDBI\nread database table to data frame\n\n\ndbSendQuery()\nDBI\nsubmit and execute SQL query to database engine\n\n\ndbWriteTable()\nDBI\nwrite a data frame to database table\n\n\ndense_rank()\ndplyr\nrank vector elements with no gaps between ranks\n\n\ndesc()\ndplyr\norder in descending order\n\n\ndetect_index()\npurrr\nfind the position of the first match\n\n\ndetect()\npurrr\nreturn value of first matching element\n\n\ndim()\nbase\nreturn dimensions of matrix, data frame, etc.\n\n\ndir_ls()\nfs\nreturn filenames and directories in named directory\n\n\ndir()\nbase\nreturn directories in named directory\n\n\ndiscard()\npurrr\ndiscard elements using a predicate function\n\n\ndistinct()\ndplyr\nselect only unique/distinct rows from data frame\n\n\ndmonths()\nlubridate\ncalculate duration of months in seconds and weeks\n\n\ndmy()\nlubridate\nparse dates as day, month, year\n\n\ndnorm()\nstats\ngenerate density for normal distribution\n\n\ndouble()\nbase\ncreate a double-precision vector\n\n\ndput()\nbase\nwrite an ASCII text representation of object\n\n\nduckdb_read_csv()\nduckdb\nread a CSV file into DuckDB\n\n\nduckdb_register_arrow()\nduckdb\nregister an Arrow data source as a virtual table in a DuckDB connection\n\n\nEncoding()\nbase\nread the declared encodings for character vector\n\n\nends_with()\ntidyselect\nmatch column names that end with string\n\n\nenframe()\ntibble\nconvert vectors to data frame\n\n\nevery()\npurrr\ndetermine if all elements meet predicate function conditional\n\n\neverything()\ntidyselect\nselect all variables\n\n\nexcel_sheets()\nreadxl\nreturn the sheet names from an Excel spreadsheet\n\n\nexp()\nbase\ncompute exponential function\n\n\nfacet_grid()\nggplot2\ncreate grid of subplots from multiple variables\n\n\nfacet_wrap()\nggplot2\ncreate subplots from one variable\n\n\nfactor()\nbase\nencode vector as factor\n\n\nfct_collapse()\nforcats\ncollapse factors into manually defined groups\n\n\nfct_infreq()\nforcats\nreorder factor levels in the order of most to least frequent\n\n\nfct_inorder()\nforcats\nreorder factor levels in the order that they first appear\n\n\nfct_lump_lowfreq()\nforcats\nlump together least frequent levels of a factor\n\n\nfct_lump_min()\nforcats\nlump factor levels that appear fewer than a certain number of times\n\n\nfct_lump_n()\nforcats\nlump all factor levels except the most frequent\n\n\nfct_lump_prop()\nforcats\nlump factor levels that appear fewer than a certain proportion of times\n\n\nfct_lump()\nforcats\nlump together factor levels into ‘other’\n\n\nfct_recode()\nforcats\nchange factor levels by hand\n\n\nfct_relevel()\nforcats\nreorder factor levels by hand\n\n\nfct_reorder()\nforcats\nreorder factor levels by sorting along another variable\n\n\nfct_reorder2()\nforcats\nreorder factor levels by sorting along another variable with two dimensions\n\n\nfct_rev()\nforcats\nreverse order of factor levels\n\n\nfile.info()\nbase\nextract file information\n\n\nfill()\ntidyr\nfill in missing values\n\n\nfilter()\ndplyr\nkeep rows based on values of columns\n\n\nfixed()\nstringr\ncompare literal bytes in a string\n\n\nflatten_dbl()\npurrr\nflatten a list into an atomic vector in purrr\n\n\nfloor_date()\nlubridate\nround date-time down to floor\n\n\nfloor()\nbase\nround down to nearest integer\n\n\nforce_tz()\nlubridate\nreplace time zone to create new date-time\n\n\nformat()\nbase\nformat object for pretty printing\n\n\nfread()\ndata.table\nread delimited files\n\n\nfromJSON()\njsonlite\nconvert JSON data to R object\n\n\nfull_join()\ndplyr\njoin two data sets keeping the observations in both\n\n\nfwf_positions()\nreadr\nspecify fields by positions\n\n\nfwf_widths()\nreadr\nspecify fields by widths\n\n\ngam()\nmgcv\ncompute generalized additive model\n\n\ngather_predictions()\nmodelr\nadd predictions and pivot longer\n\n\ngeom_abline()\nggplot2\nadd vertical, horizontal, or diagonal reference lines\n\n\ngeom_bar()\nggplot2\ncreate bar chart based on counts in data\n\n\ngeom_bin_2d()\nggplot2\ncreate heatmap of two dimensional bin counts\n\n\ngeom_boxplot()\nggplot2\nadd layer of boxplots to plot\n\n\ngeom_col()\nggplot2\ncreate bar chart based on values in data\n\n\ngeom_count()\nggplot2\nadd layer of points sized by count of overlapping points to plot\n\n\ngeom_freqpoly()\nggplot2\ncreate frequency polygon\n\n\ngeom_hex()\nggplot2\ncreate heatmap of bin counts using hexagons\n\n\ngeom_histogram()\nggplot2\ncreate histogram of counts as bars\n\n\ngeom_hline()\nggplot2\nplot horizontal reference line\n\n\ngeom_jitter()\nggplot2\nadd layer of jittered points to plot\n\n\ngeom_label()\nggplot2\nadds text in rectangle to plot\n\n\ngeom_line()\nggplot2\nadd layer of data lines to plot\n\n\ngeom_lv()\nlvplot\ncreate letter value box plot\n\n\ngeom_point()\nggplot2\nadd layer of points to plot\n\n\ngeom_polygon()\nggplot2\nadd layer of polygons to plot\n\n\ngeom_rect()\nggplot2\nplot rectangle\n\n\ngeom_ref_line()\nmodelr\nadd reference line to plot\n\n\ngeom_segment()\nggplot2\nplot line segment\n\n\ngeom_smooth()\nggplot2\ncreate smoothed lines to plot\n\n\ngeom_text()\nggplot2\nadds text to plot\n\n\ngeom_tile()\nggplot2\ncreate tile plot using center of rectangle and size\n\n\ngeom_violin()\nggplot2\ncreate violin plot\n\n\ngeom_vline()\nggplot2\nplot vertical reference line\n\n\nget()\nbase\nsearch by name for an object\n\n\ngetS3method()\nutils\nreturn a method for S3 generic function\n\n\ngetwd()\nbase\nreturn working directory\n\n\nggplot()\nggplot2\ncreate a plotting area\n\n\nggsave()\nggplot2\nsave a ggplot\n\n\nglance()\ngenerics\nglance at an object\n\n\nglm()\nstats\ncompute generalized linear model\n\n\nglmnet()\nglmnet\ncompute generalized linear model via penalized maximum likelihood\n\n\nglob2rx()\nutils\nchange wildcard/globbing patterns into regular expressions\n\n\nglue()\nglue\ncombine expressions into character string\n\n\ngrepl()\nbase\nsearch for all matches of pattern within each element of a character vector\n\n\ngroup_by()\ndplyr\ngroup data by levels of column\n\n\ngsub()\nbase\nreplace all matches of pattern within each element of a character vector\n\n\nguess_encoding()\nreadr\nguess encoding of file\n\n\nguess_parser()\nreadr\nreturn the name of the parser\n\n\nguide_colourbar()\nggplot2\ncontrol legend color bar\n\n\nguide_legend()\nggplot2\ncontrol legend formatting\n\n\nguides()\nggplot2\nset guides for scale\n\n\nhead_while()\npurrr\nfind first elements that satisfy predicate\n\n\nhead()\nutils\nreturn first rows of matrix, data frame, etc.\n\n\nhoist()\ntidyr\npull components of a list-column out into their own top-level columns\n\n\nhour()\nlubridate\nreturn or set hour component of a date-time\n\n\nhtml_document()\nrmarkdown\ncreate HTML document from R markdown file\n\n\nI()\nbase\ninhibit interpretation/conversion of objects\n\n\nidentical()\nbase\nsafe and reliable way to test if two objects are exactly equal\n\n\nif_else()\ndplyr\nvectorized if statement that checks conditionals and returns different outputs based on answer\n\n\nifelse()\nbase\nconditionally set values\n\n\ninner_join()\ndplyr\njoin two data sets keeping the observations that they have in common\n\n\ninstall.packages()\nutils\ninstall R packages\n\n\nintersect()\nbase\nreturn only observations in both x and y\n\n\ninvisible()\nbase\nreturn invisible copy of object\n\n\ninvoke_map()\npurrr\nmakes it easier to call lists of functions with lists of parameters\n\n\nioslides_presentation()\nrmarkdown\ncreate ioslides presentation from R markdown file\n\n\nIQR()\nstats\ncomputes interquartile range\n\n\nis_character()\nrlang\ntidyverse way to determine whether object is of type character\n\n\nis_double()\nrlang\ntidyverse way to determine whether object is of type double\n\n\nis_integer()\nrlang\ntidyverse way to determine whether object is of type integer\n\n\nis_list()\nrlang\ntidyverse way to determine whether object is of type list\n\n\nis_logical()\nrlang\ntidyverse way to determine whether object is of type logical\n\n\nis_vector()\nrlang\ntidyverse way to determine whether object is of type vector\n\n\nis.finite()\nbase\ndetermines if numeric is finite\n\n\nis.infinite()\nbase\ndetermine whether elements of vector are infinite\n\n\nis.na()\nbase\ndetermine whether elements of vector are missing\n\n\nis.nan()\nbase\ndetermine whether elements of vector are not a number\n\n\nis.vector()\nbase\ncheck if object is vector\n\n\njoin_by()\ndplyr\nNA\n\n\nkable()\nknitr\ncreate knitr table\n\n\nkeep()\npurrr\nkeep elements using a predicate function\n\n\nkmeans()\nstats\nperform k-means clustering on data matrix\n\n\nlabs()\nggplot2\nmodify axis, legend, and plot labels\n\n\nlag()\ndplyr\nfind the previous values in a vector\n\n\nlapply()\nbase\napply a function to multiple elements of an object and return a list\n\n\nlead()\ndplyr\nfind the next values in a vector\n\n\nleft_join()\ndplyr\njoin two data sets keeping the observations in the left one\n\n\nlength()\nbase\nreturn number of elements in a vector\n\n\nlengths()\nbase\nreturn length of each element of a list or vector\n\n\nlevels()\nbase\nview and change factor levels\n\n\nlibrary()\nbase\nload R packages\n\n\nlist()\nbase\ncreate recursive vector (list)\n\n\nlm()\nstats\nfit linear model\n\n\nload()\nbase\nload data sets written with save()\n\n\nlocale()\nreadr\ncapture or set default values for a country\n\n\nloess()\nstats\napply local polynomial regression fitting\n\n\nlog()\nbase\ncompute natural logarithm\n\n\nlog10()\nbase\ncompute base 10 logarithm\n\n\nlog2()\nbase\ncompute base 2 logarithm\n\n\nmake_clean_names()\njanitor\nclean vector of text to be unique and consistent of only characters, numbers and _\n\n\nmake_date()\nlubridate\ncreate object of class Date\n\n\nmake_datetime()\nlubridate\ncreate date-times from numeric representations\n\n\nmap_chr()\npurrr\napply a function to multiple elements of an object in purrr, return a character vector\n\n\nmap_dbl()\npurrr\napply a function to multiple elements of an object in purrr, return a double vector\n\n\nmap_int()\npurrr\napply a function to multiple elements of an object in purrr, return a integer vector\n\n\nmap_lgl()\npurrr\napply a function to multiple elements of an object in purrr, return a logical vector\n\n\nmap()\npurrr\napply a function to multiple elements of an object in purrr, return a list\n\n\nmap2()\npurrr\napply a function to multiple elements over two vectors in parallel\n\n\nmatch()\nbase\nreturn vector of positions of first matches of pattern\n\n\nmatches()\ntidyselect\nselect helper that matches a regular expression\n\n\nmatrix()\nbase\ncreate matrix of numbers, characters, etc.\n\n\nmax()\nbase\ncompute maxima of input values\n\n\nmday()\nlubridate\nextract day number of month\n\n\nmdy_hm()\nlubridate\nparse month, day, year and hour, minute\n\n\nmdy()\nlubridate\nparse dates as month, day, year\n\n\nmean()\nbase\ncalculate mean of elements of vector\n\n\nmedian()\nstats\ncompute sample median\n\n\nmerge()\nbase\njoin two data sets\n\n\nmethods()\nutils\nreturn all available methods for function\n\n\nmin_rank()\ndplyr\nrank vector elements with ties set to minimum\n\n\nmin()\nbase\ncompute minima of input values\n\n\nminute()\nlubridate\nreturn or set minute component of a date-time\n\n\nmode()\nbase\nget or set the storage mode of an object\n\n\nmodel_matrix()\nmodelr\nconstruct a design matrix\n\n\nmonth()\nlubridate\nreturn or set month component of a date-time\n\n\nmonths()\nlubridate\nspecify the number of months to be used in dates\n\n\nmutate()\ndplyr\ncreate or modify data columns\n\n\nmvrnorm()\nMASS\nproduce samples from multivariate normal distribution\n\n\nn()\ndplyr\nreturn current group size\n\n\nna_if()\ndplyr\nreplace values with NA\n\n\nnames()\nbase\nreturn (and can assign) column names\n\n\nncol()\nbase\nreturn number of columns in matrix, data frame, etc.\n\n\nnear()\ndplyr\ncompare if two vectors of floating point numbers are equal (with a built-in tolerance)\n\n\nnest()\ntidyr\ncreates nested list structure\n\n\nnobs()\nstats\nextract number of observations from model fit\n\n\nnow()\nlubridate\nreturn current date and time\n\n\nnrow()\nbase\nreturn number of rows in matrix, data frame, etc.\n\n\nns()\nsplines\ngenerate basis matrix for natural cubic splines\n\n\nntile()\ndplyr\nrough rank, which breaks vector into buckets\n\n\nnum_range()\ntidyselect\nmatch column names with number range\n\n\nnumericInput()\nshiny\nallow numeric input in Shiny\n\n\nobj_size()\nlobstr\ncompute the size of an object\n\n\nobject_size()\npryr\ncompute size of object\n\n\nobject.size()\nutils\nestimate memory required to store an object\n\n\nOlsonNames()\nbase\nreturn vector of all time zone names\n\n\noptim()\nstats\napply optimization algorithm\n\n\nopts_chunk()\nknitr\nset options for R code chunks\n\n\norder_by()\ndplyr\ncontrol ordering of window functions\n\n\norder()\nbase\nreturn index of sorted vector (base R)\n\n\nordered()\nbase\ncreated ordered factor\n\n\nparse_character()\nreadr\nparse a character vector to characters\n\n\nparse_date()\nreadr\nparse date\n\n\nparse_datetime()\nreadr\nparse date/time\n\n\nparse_double()\nreadr\nparse a character vector to doubles\n\n\nparse_factor()\nreadr\nparse a character vector to factors\n\n\nparse_guess()\nreadr\nparse the column based on the guessed type\n\n\nparse_integer()\nreadr\nparse a character vector to integers\n\n\nparse_json()\njsonlite\ncreate JSON file from string\n\n\nparse_logical()\nreadr\nparse a character vector to logicals\n\n\nparse_number()\nreadr\nparse a character vector to numbers\n\n\nparse_time()\nreadr\nparse time\n\n\npaste()\nbase\nconcatenate character vectors with space between elements\n\n\npaste0()\nbase\nconcatenate character vectors with no space between elements\n\n\npdf_document()\nrmarkdown\ncreate PDF document from R markdown file\n\n\npercent_rank()\ndplyr\nrescale rank between 0 and 1\n\n\npivot_longer()\ntidyr\npivot data frame to be longer\n\n\npivot_wider()\ntidyr\npivot data frame to be wider\n\n\npmap()\npurrr\napply a function to multiple elements over a list of vectors in parallel\n\n\npmax()\nbase\ncompute parallel maxima for one or more vectors\n\n\npmin()\nbase\ncompute parallel minima for one or more vectors\n\n\npoly()\nstats\ncompute orthogonal polynomials\n\n\npossibly()\npurrr\nsafely return result or default when there is an error\n\n\nprint()\nbase\nprints argument\n\n\nproblems()\nreadr\nretrieve parsing problems\n\n\nprod()\nbase\nreturn product of all values in arguments\n\n\npull()\ndplyr\nextract a single column\n\n\npwalk()\npurrr\napply multiple functions over multiple arguments in parallel, only for side effects\n\n\nquantile()\nstats\ncalculate sample quantiles\n\n\nquietly()\npurrr\nsafely return result, messages, and warnings\n\n\nquote()\nbase\nreturns quoted expression\n\n\nrandomForest()\nrandomForest\ncompute random forest model\n\n\nrange_read()\ngooglesheets4\nimport a Google sheet (function name matches googlesheets4 conventions)\n\n\nrank()\nbase\nreturn sample ranks of the values in a vector\n\n\nrbind()\nbase\nbind rows in base R\n\n\nread_csv()\nreadr\nread comma delimited files\n\n\nread_csv2()\nreadr\nread semicolon separated files\n\n\nread_delim()\nreadr\nread any kind of delimited file\n\n\nread_excel()\nreadxl\nimport either xls or xlsx Excel files\n\n\nread_feather()\nfeather\nread feather files\n\n\nread_file()\nreadr\nread a complete file\n\n\nread_fwf()\nreadr\nread fixed width files\n\n\nread_json()\njsonlite\nread JSON file from disk\n\n\nread_lines()\nreadr\nread lines from a file\n\n\nread_log()\nreadr\nread Apache style log files\n\n\nread_rds()\nreadr\nread RDS files\n\n\nread_sheet()\ngooglesheets4\nimport a Google sheet (function name matches readr conventions)\n\n\nread_table()\nreadr\nread fixed width files separated by white space\n\n\nread_tsv()\nreadr\nread tab delimited files\n\n\nread_xls()\nreadxl\nimport xls Excel files\n\n\nread_xlsx()\nreadxl\nimport xlsx Excel files\n\n\nread.csv()\nutils\nimport CSV file (base R)\n\n\nreadr_example()\nreadr\nget path to readr example\n\n\nreadRDS()\nbase\nread RDS files\n\n\nreadxl_example()\nreadxl\nget path to readxl example\n\n\nreduce()\npurrr\nreduce list to single value by iteratively applying binary function\n\n\nregex()\nbase\nuse regular expressions\n\n\nregmatches()\nbase\nextract or replace matched substrings\n\n\nrelocate()\ndplyr\nchange column order\n\n\nrename_with()\ndplyr\nrename columns with function\n\n\nrename()\ndplyr\nrename columns\n\n\nrender_site()\nrmarkdown\nrender R markdown documents into website\n\n\nrender()\nrmarkdown\nconvert R markdown document to another format\n\n\nreorder()\nstats\nreorder factor levels based on another variable\n\n\nrep()\nbase\ncreate repetitions of numbers, characters, etc.\n\n\nreprex()\nreprex\nrender a reproducible example\n\n\nreturn()\nbase\nreturn value\n\n\nrevealjs_presentation()\nrevealjs\ncreate revealjs presentation from R markdown file\n\n\nright_join()\ndplyr\njoin two data sets keeping the observations in the right one\n\n\nrlm()\nMASS\ncompute robust linear model\n\n\nrnorm()\nstats\ngenerate random sample from normal distribution\n\n\nround_date()\nlubridate\nround date-time\n\n\nround()\nbase\nround values to specified number of digits\n\n\nrow_number()\ndplyr\nrank vector elements with ties set to first\n\n\nrpart()\nrpart\ncompute recursive partitioning and regression trees\n\n\nrunif()\nstats\ngenerate random number from uniform distribution\n\n\nsafely()\npurrr\nsafely return result and error\n\n\nsample()\nbase\nrandomly sample from vector\n\n\nsapply()\nbase\napply a function to multiple elements of an object and return a vector, matrix, or array\n\n\nsaveRDS()\nbase\nwrite RDS files\n\n\nsaveWorkbook()\nopenxlsx\nwrite a Workbook object to a file\n\n\nscale_color_brewer()\nggplot2\nmap colors to data with ColorBrewer\n\n\nscale_color_discrete()\nggplot2\nscale color aesthetic to be discrete\n\n\nscale_color_gradient()\nggplot2\nscale color aesthetic to continuous color gradient\n\n\nscale_color_gradient2()\nggplot2\nscale color aesthetic to diverging color gradient\n\n\nscale_color_manual()\nggplot2\nmap colors to data manually\n\n\nscale_color_viridis()\nviridis\nscale color aesthetic to viridis color gradient\n\n\nscale_fill_gradient()\nggplot2\nscale fill aesthetic to continuous color gradient\n\n\nscale_fill_viridis()\nviridis\nscale fill aesthetic to viridis gradient\n\n\nscale_x_continuous()\nggplot2\nscale x axis to be continuous\n\n\nscale_x_date()\nggplot2\nscale x axis to be date\n\n\nscale_x_log10()\nggplot2\nscale x axis to be log base 10\n\n\nscale_y_continuous()\nggplot2\nscale y axis to be continuous\n\n\nscale_y_log10()\nggplot2\nscale y axis to be log base 10\n\n\nsd()\nstats\ncompute standard deviation\n\n\nsecond()\nlubridate\nreturn or set second component of a date-time\n\n\nselect()\ndplyr\nkeep specified columns\n\n\nsemi_join()\ndplyr\njoin two data sets keeping all observations in x that have a match in y\n\n\nseparate_rows()\ntidyr\nseparate collapsed column into multiple rows\n\n\nseparate()\ntidyr\nsplit single column into multiple columns\n\n\nseq_along()\nbase\nreturn a sequence along the length of an object\n\n\nseq_range()\nmodelr\nreturn sequence over the range of a vector\n\n\nseq()\nbase\ncreate sequences of numbers\n\n\nsession.info()\nsessioninfo\nreturn R session info and loaded packages\n\n\nsessionInfo()\nutils\nreturn info about R version, operating system, and loaded packages\n\n\nset_names()\nmagrittr\nset names of object\n\n\nsetdiff()\nbase\nreturn observations in x but not y\n\n\nsetNames()\nstats\nset the name of an object and return the object\n\n\nsetwd()\nbase\nset working directory\n\n\nshow_query()\ndplyr\ngive details about database table object\n\n\nslice_head()\ndplyr\nselect the first (specified) number of rows\n\n\nslice_min()\ndplyr\nselect the rows with the lowest values of a variable\n\n\nslidy_presentation()\nrmarkdown\ncreate Slidy presentation from R markdown file\n\n\nsome()\npurrr\ndetermine if some of elements meet predicate function conditional\n\n\nsort()\nbase\nsort a vector or factor into ascending or descending order (base R)\n\n\nspread_predictions()\nmodelr\nadd predictions and pivot wider\n\n\nstarts_with()\ntidyselect\nmatch column names that begin with string\n\n\nstat_count()\nggplot2\nstatistical transformation that counts numbers of instances\n\n\nstat_smooth()\nggplot2\nstatistical transformation that computes smoothed conditional means\n\n\nstat_summary()\nggplot2\nsummarize y values for each x value\n\n\nstop_for_problems()\nreadr\nthrow error and stop script if any parsing problems\n\n\nstop()\nbase\nstop execution of current expression and return an error\n\n\nstopifnot()\nbase\ntest condition and produce error at first FALSE\n\n\nstr_c()\nstringr\ncombines two or more strings\n\n\nstr_count()\nstringr\ncount number of matches in a string\n\n\nstr_detect()\nstringr\ndetect presence of pattern in string\n\n\nstr_dup()\nstringr\nduplicate and concatenate strings within a character vector\n\n\nstr_equal()\nstringr\ncompare if two strings are equal\n\n\nstr_escape()\nstringr\nadd escape  to special characters\n\n\nstr_extract_all()\nstringr\nextract all matching patterns in a string\n\n\nstr_extract()\nstringr\nextract first matching patterns in a string\n\n\nstr_flatten()\nstringr\nflatten a string\n\n\nstr_glue()\nstringr\nformat and interpolate a string with glue\n\n\nstr_length()\nstringr\nreturns number of characters in a string\n\n\nstr_locate_all()\nstringr\nlocate all positions of pattern in a string\n\n\nstr_locate()\nstringr\nlocate first position of pattern in a string\n\n\nstr_match_all()\nstringr\nextract all matched groups from a string\n\n\nstr_match()\nstringr\nextract first matched group from a string\n\n\nstr_order()\nstringr\nreturn index of sorted vector (stringr version)\n\n\nstr_remove_all()\nstringr\nremove all instances of a pattern in a string\n\n\nstr_replace_all()\nstringr\nreplace all matched patterns in a string\n\n\nstr_replace_na()\nstringr\nreplace NAs with other characters\n\n\nstr_replace()\nstringr\nreplace first matched pattern in a string\n\n\nstr_sort()\nstringr\nsort numeric or character vector (stringr version)\n\n\nstr_split()\nstringr\nsplit string into pieces\n\n\nstr_sub()\nstringr\nextract parts of a string\n\n\nstr_subset()\nstringr\nextract elements that match pattern\n\n\nstr_to_lower()\nstringr\nchange text to lower case\n\n\nstr_to_title()\nstringr\nchange text to upper case\n\n\nstr_to_upper()\nstringr\nchange text to upper case\n\n\nstr_trim()\nstringr\ntrim whitespace from string\n\n\nstr_view_all()\nstringr\nview all regular expression matches\n\n\nstr_view()\nstringr\nview first regular expression match\n\n\nstr_wrap()\nstringr\nwrap strings into nicely formatted paragraphs\n\n\nstr()\nutils\nreturn object structure\n\n\nstri_locale_list()\nstringi\ncreate character vector with all available locale identities\n\n\nstri_sort()\nstringi\nsort character vector in lexicographic order\n\n\nsum()\nbase\nsum elements of vector\n\n\nsummarize()\ndplyr\nsummarize data usually by grouping variable\n\n\nsummary()\nbase\nreturn summary of model fitting functions\n\n\nsuppressMessages()\nbase\nsuppress the printing of messages\n\n\nsuppressWarnings()\nbase\nsuppress the printing of warnings\n\n\nswitch()\nbase\nselect one of a list of alternatives\n\n\nSys.timezone()\nbase\nreturn name of current time zone\n\n\nt.test()\nstats\ncomputer one and two sample Student’s t-test on vectors of data\n\n\ntail_while()\npurrr\nfind last elements that satisfy predicate\n\n\ntail()\nutils\nreturn last rows of matrix, data frame, etc.\n\n\ntapply()\nbase\napply a function to each cell of a ragged array\n\n\ntbl()\ndplyr\ncreate a database table from data source\n\n\ntextInput()\nshiny\nallow text input in Shiny\n\n\ntheme()\nggplot2\ncustomize non-data components of plot\n\n\ntibble()\ntibble\ncreate tibble\n\n\ntidy()\ngenerics\nturn object into tidy tibble\n\n\ntidyverse_update()\ntidyverse\nupdate tidyverse packages\n\n\ntoday()\nlubridate\nreturn the current date\n\n\ntransmute()\ndplyr\ncreates new data column and dropping existing ones\n\n\ntranspose()\npurrr\nturn list-of-lists ‘inside out’\n\n\ntribble()\ntibble\ncreate row-wise tibble\n\n\ntrim()\nglue\ntrim a character vector\n\n\ntry()\nbase\ntry an expression and allow errors\n\n\ntryCatch()\nbase\nevaluates an expression with the possibility to catch exceptions\n\n\ntype_convert()\nreadr\nre-convert character columns in existing data frame\n\n\ntypeof()\nbase\nreturn object type\n\n\nungroup()\ndplyr\nremove grouping\n\n\nunion()\nbase\nreturn unique observations in x or y\n\n\nunique()\nbase\nreturn vector with duplicate elements removed\n\n\nunite()\ntidyr\ncombine multiple columns into single column\n\n\nunlist()\nbase\nflatten a list into an atomic vector in base R\n\n\nunnest_auto()\ntidyr\nturn each element of a list-column into a row or column\n\n\nunnest_longer()\ntidyr\nturn each element of a list-column into a row\n\n\nunnest_wider()\ntidyr\nturn each element of a list-column into a column\n\n\nunnest()\ntidyr\nremove nested structure\n\n\nupdate()\nstats\nupdate and refit a model\n\n\nvapply()\nbase\napply a function to multiple elements of an object and return a vector\n\n\nvector()\nbase\ncreate a vector\n\n\nView()\nutils\nopen spreadsheet view of matrix-like object\n\n\nwalk()\npurrr\napply a function to multiple elements of an object to obtain side effects\n\n\nwalk2()\npurrr\napply multiple functions over two arguments in parallel, only for side effects\n\n\nwday()\nlubridate\nextract day number of week\n\n\nwith_tz()\nlubridate\nreturn date-time in a different time zone\n\n\nword_document()\nrmarkdown\ncreate Word document from R markdown file\n\n\nwrite_csv()\nreadr\nwrite a data frame to comma delimited files\n\n\nwrite_excel_csv()\nreadr\nexport a csv file to Excel\n\n\nwrite_rds()\nreadr\nwrite RDS files\n\n\nwrite_tsv()\nreadr\nwrite a data frame to tab delimited files\n\n\nwrite_xlsx()\nwritexl\nwrite object to xlsx Excel file (writexl)\n\n\nwrite.xlsx()\nopenxlsx\nwrite object to xlsx Excel file (openxlsx )\n\n\nwriteLines()\nbase\nwrite text lines to a connection\n\n\nxgboost()\nsgboost\ncomputer gradient boosting models\n\n\nxlim()\nggplot2\nspecify limits of x axis\n\n\nxor()\nbase\napply elementwise exclusive OR\n\n\nyday()\nlubridate\nextract day number of year\n\n\nyear()\nlubridate\nreturn or set year component of a date-time\n\n\nylim()\nggplot2\nspecify limits of y axis\n\n\nymd_hms()\nlubridate\nparse dates and time\n\n\nymd()\nlubridate\nparse dates with year, month, and day components"
  },
  {
    "objectID": "psyteachr/table.html",
    "href": "psyteachr/table.html",
    "title": "flashr decks",
    "section": "",
    "text": "term\ndefinition\n\n\n\n\nalpha\n(stats) The cutoff value for making a decision to reject the null hypothesis; (graphics) A value between 0 and 1 used to control the levels of transparency in a plot\n\n\nbeta\nThe false negative rate we accept for a statistical test.\n\n\nfalse negative\nWhen a test concludes there is no effect when there really is an effect\n\n\nfalse positive\nWhen a test concludes there is an effect when there really is no effect\n\n\nhypothesis\nA proposed explanation made on the basis of limited evidence as a starting point for further investigation.\n\n\npower\nThe probability of rejecting the null hypothesis when it is false.\n\n\nprobability\nA number between 0 and 1 where 0 indicates impossibility of the event and 1 indicates certainty\n\n\nreplicability\nThe extent to which the findings of a study can be repeated with new samples from the same population.\n\n\nsample\nA subset of the population that you wish to make an inference about through your test.\n\n\nsecondary data\ndata that has been collected already and made available to you to ask research questions of."
  },
  {
    "objectID": "LICENSE.html",
    "href": "LICENSE.html",
    "title": "flashr decks",
    "section": "",
    "text": "Copyright (c) 2022 Jeffrey R. Stevens (jeffrey.r.stevens@protonmail.com)\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the “Software”), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
  },
  {
    "objectID": "contribute.html",
    "href": "contribute.html",
    "title": "flashr decks",
    "section": "",
    "text": "Feel free to propose new decks to contribute to flashr_decks. It makes most sense to post decks that other people might be interested in using—for example, based on books or publicly available resources. The best way to do this is to create the CSV files for the decks and submit a pull request. To create the CSV files, create columns titled term, description, package, and title (optional). Then fill in these columns with the terms, descriptions, and packages that you would like included in your flashcards. Check out the flashr documentation for more details on creating decks. Please keep file names short and consistent (e.g., r2ds1.csv for functions from R for Data Science Chapter 1).\nFeel free to contact me to check if a deck idea makes sense for this repository or if you have questions about building decks. Once the decks are built, submit a pull request to add them to the decks/ directory of this repository. Note, all decks posted here (included contributed decks) are published under the MIT license and contributors of decks must abide by the project’s code of conduct.\n\n\nPlease note that the flashr decks project is released with a contributor code of conduct.\nBy participating in this project you agree to abide by its terms."
  },
  {
    "objectID": "decks.html",
    "href": "decks.html",
    "title": "flashr decks",
    "section": "",
    "text": "This has not only a list of the built-in decks available for the flashr package (and the tags used in the flashr package) but also HTML examples of each deck that you can test out.\n\n\n\n\nR for Data Science (1st edition)\n\n\nCh. 1 Introduction: r4ds1\nCh. 3 Data visualization: r4ds3\nCh. 5 Data transformation: r4ds5\nCh. 7 Exploratory data analysis: r4ds7\nCh. 8 Workflow: projects: r4ds8\nCh. 10 Tibbles: r4ds10\nCh. 11 Data import: r4ds11\nCh. 12 Tidy data: r4ds12\nCh. 13 Relational data: r4ds13\nCh. 14 Strings: r4ds14\nCh. 15 Factors: r4ds15\nCh. 16 Dates and times: r4ds16\nCh. 18 Pipes: r4ds18\nCh. 20 Vectors: r4ds20\nCh. 21 Iteration: r4ds21\nCh. 23 Model basics: r4ds23\nCh. 25 Many models: r4ds25\nCh. 27 R Markdown: r4ds27\nCh. 28 Graphics for communication: r4ds28\nCh. 29 R Markdown formats: r4ds29\nCh. 30 R Markdown workflow: r4ds30\n\n\n\n\nMiscellaneous decks\n\n\nData types: data_types\nOperators: operators\nVectors: vectors\n\n\n\n\n\n\n\nPsyTeachR Fundamentals of Quantitative Analysis\n\n\nCh. 1 Programming basics: psyteachr_ads1\nCh. 2 Intro to R: psyteachr_ads2\nCh. 3 Starting with data: psyteachr_ads3\nCh. 4 Data wrangling 1: psyteachr_ads4\nCh. 5 Data wrangling 2: psyteachr_ads5\nCh. 6 Data wrangling 3: psyteachr_ads6\nCh. 7 Intro to data visualisation: psyteachr_ads7\nCh. 8 Probability: psyteachr_ads8\nCh. 9 Correlations: psyteachr_ads9\nCh. 10 t-tests: psyteachr_ads10\nCh. 11 Power and effect sizes: psyteachr_ads11\nCh. 12 Screening data: psyteachr_ads12\nCh. 13 Visualisation: psyteachr_ads13\nCh. 14 One-way ANOVA: psyteachr_ads14\nCh. 15 Factorial ANOVA: psyteachr_ads15\nCh. 16 Regression: psyteachr_ads16\nCh. 17 Multiple regression: psyteachr_ads17\n\n\n\n\nPsyTeachR Data Skills for Reproducible Research\n\n\nCh. 1 Getting started: psyteachr_dsrr1\nCh. 2 Reproducible workflows: psyteachr_dsrr2\nCh. 3 Data visualisation: psyteachr_dsrr3\nCh. 4 Working with data: psyteachr_dsrr4\nCh. 5 Data relations: psyteachr_dsrr5\nCh. 6 Tidy data: psyteachr_dsrr6\nCh. 7 Data wrangling: psyteachr_dsrr7\nCh. 8 Introduction to GLM: psyteachr_dsrr8\nCh. 9 Iteration & functions: psyteachr_dsrr9\nCh. 10 Probability & simulation: psyteachr_dsrr10\n\n\n\n\nPsyTeachR Applied Data Skills\n\n\nCh. 1 Intro to R and RStudio: psyteachr_ads1\nCh. 2 Reports with R Markdown: psyteachr_ads2\nCh. 3 Data visualisation: psyteachr_ads3\nCh. 4 Data import: psyteachr_ads4\nCh. 5 Data summaries: psyteachr_ads5\nCh. 6 Practice report: psyteachr_ads6\nCh. 7 Data relations: psyteachr_ads7\nCh. 8 Data tidying: psyteachr_ads8\nCh. 9 Data wrangling: psyteachr_ads9\nCh. 10 Customising visualisations & reports: psyteachr_ads10\n\n\nIf you have ideas for decks that are listed here, look into contributing your own decks."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "flashr decks",
    "section": "",
    "text": "Welcome to the flashcard deck repository for the flashr R package. flashr creates flashcard decks in HTML to help you learn the meanings of R functions or other term/description pairs.\nFor example, interested in getting some practice remembering the functions from R for Data Science? flashr has built-in flashcard decks with the functions and descriptions from each of the chapters.\nYou can check out the available decks to see what decks are already built or even contribute your own decks to the repo for others to use!"
  },
  {
    "objectID": "index.html#license",
    "href": "index.html#license",
    "title": "flashr decks",
    "section": "License",
    "text": "License\nThis repository is licensed under the MIT license. See the LICENSE.md file for more details."
  },
  {
    "objectID": "index.html#acknowledgments",
    "href": "index.html#acknowledgments",
    "title": "flashr decks",
    "section": "Acknowledgments",
    "text": "Acknowledgments\nMany thanks to Mengzhu Fu, Eisha Haque, Jay Schalk, Doug Schultz, London Wolff, and Josh Zosky for helping extract functions and URLs from R for Data Science!"
  }
]